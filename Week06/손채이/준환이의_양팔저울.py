'''
1
3
1 2 4

메모이제이션(memoization)은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때,
이전에 계산한 값을 메모리에 저장함으로써
동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다.
동적 계획법의 핵심이 되는 기술이다.
'''

# 저울 양쪽 무게를 맞추는 경우의 수를 찾는 함수
def find(n, k, lw, rw, ld, rd):
    global cnt  # 전역 변수 cnt는 경우의 수를 저장합니다.

    # 만약 왼쪽 무게가 오른쪽 무게보다 가볍다면 (규칙에 어긋남)
    if lw < rw:
        return 0  # 가능한 경우가 아니므로 0을 반환

    # 모든 물체를 다 사용한 경우 (종료 조건)
    elif n == k:
        return 1  # 가능한 경우이므로 1을 반환

    # 이미 계산된 경우의 수가 메모이제이션에 저장되어 있다면 해당 값 반환
    elif d[ld][rd] != -1:
        return d[ld][rd]

    else:
        # 경우의 수 합계를 저장할 변수
        sum = 0

        # 각 물체에 대해 왼쪽 또는 오른쪽 저울에 올려봅니다.
        for i in range(k):
            if u[i] == 0:  # 물체가 아직 사용되지 않았다면
                u[i] = 1  # 현재 물체를 사용 상태로 변경
                p[n] = i  # 현재 물체 번호를 기록

                # 1. 물체를 왼쪽 저울에 올리는 경우
                sum += find(n + 1, k, lw + w[i], rw, ld + (1 << i), rd)

                # 2. 물체를 오른쪽 저울에 올리는 경우
                sum += find(n + 1, k, lw, rw + w[i], ld, rd + (1 << i))

                u[i] = 0  # 물체를 다시 사용되지 않은 상태로 되돌림

        # 경우의 수를 메모이제이션에 저장
        d[ld][rd] = sum
        return sum  # 경우의 수 반환


# 테스트 케이스 수 입력
T = int(input())  # 입력 예시: 1 (테스트 케이스 1개)
for tc in range(1, T + 1):
    # 물체 개수 입력
    N = int(input())  # 입력 예시: 3 (물체 3개)

    # 각 물체의 무게 입력
    w = list(map(int, input().split()))  # 입력 예시: 1 2 4 (각 물체의 무게)

    # 오른쪽 저울의 초기 합계 (모든 물체 무게의 합)
    rs = sum(w)  # rs = 1 + 2 + 4 = 7 (물체들의 총합)

    # 순서를 기록할 리스트
    p = [0] * N  # p = [0, 0, 0] (순서 기록 배열 초기화)

    # 각 물체가 사용되었는지 기록하는 리스트
    u = [0] * N  # u = [0, 0, 0] (물체 사용 여부 배열 초기화)

    # 메모이제이션을 위한 배열 (-1로 초기화)
    d = [[-1] * (2 ** N) for i in range(2 ** N)]  # d는 8x8 크기의 2차원 배열

    # 경우의 수를 계산하는 함수 호출
    cnt = find(0, N, 0, 0, 0, 0)  # 초기 상태로 탐색 시작 (n=0, lw=0, rw=0, ld=0, rd=0)

    # 결과 출력
    print('#{} {}'.format(tc, cnt))

# 입력 예시:
# 1 (테스트 케이스 1개)
# 3 (물체 3개)
# 1 2 4 (각 물체의 무게)

# 경우의 수 탐색 과정:
# - 처음에는 물체 1, 2, 4를 각각 왼쪽 또는 오른쪽 저울에 올릴 수 있음
# - 조건은 왼쪽 무게가 오른쪽보다 작지 않도록 물체를 배치해야됨
# - 이 과정을 거쳐 가능한 모든 경우를 탐색한 후 그 경우의 수를 계산

# 예시로 물체 1, 2, 4를 왼쪽과 오른쪽에 배치하는 과정:
# 1. 물체 1을 왼쪽에 올림 (lw = 1)
# 2. 물체 2를 왼쪽에 올림 (lw = 1 + 2 = 3)
# 3. 물체 4를 오른쪽에 올림 (rw = 4)
#    => 이 경우는 왼쪽 무게가 더 무겁기 때문에 가능
#
# 또 다른 예시:
# 1. 물체 1을 오른쪽에 올림 (rw = 1)
# 2. 물체 2를 왼쪽에 올림 (lw = 2)
# 3. 물체 4를 왼쪽에 올림 (lw = 2 + 4 = 6)
#    => 이 경우도 왼쪽이 무겁기 때문에 가능
#
# 이런 방식으로 가능한 모든 경우를 탐색한 후, 경우의 수를 출력
